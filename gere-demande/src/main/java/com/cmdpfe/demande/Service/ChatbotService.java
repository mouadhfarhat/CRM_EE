package com.cmdpfe.demande.Service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import com.cmdpfe.demande.Repository.FormationRepository;
import com.cmdpfe.demande.Repository.CategoryRepository;
import com.cmdpfe.demande.Entity.Category;
import com.cmdpfe.demande.Entity.Formation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class ChatbotService {

    private static final Logger logger = LoggerFactory.getLogger(ChatbotService.class);
    
    @Autowired
    private FormationRepository formationRepository;
    
    @Autowired
    private CategoryRepository categoryRepository;
    
    @Value("${app.base-url:http://localhost:8080}")
    private String baseUrl;
    
    // Messages de salutation et d'aide
    private final Set<String> greetings = Set.of(
        "bonjour", "bonsoir", "salut", "hello", "hey", "hi"
    );
    
    private final Set<String> helpKeywords = Set.of(
        "aide", "help", "aidez-moi", "comment", "que puis-je"
    );

    // Mots-cl√©s pour cat√©gories communes
    private final Map<String, String> categoryKeywords = Map.of(
        "ai", "intelligence artificielle",
        "ia", "intelligence artificielle", 
        "informatique", "informatique",
        "marketing", "marketing",
        "design", "design",
        "business", "business",
        "web", "d√©veloppement web",
        "digital", "digital",
        "d√©veloppement", "d√©veloppement",
        "management", "management"
    );

    public String getChatbotResponse(String userMessage) {
        if (userMessage == null || userMessage.trim().isEmpty()) {
            return "Bonjour ! Je suis l√† pour vous aider avec nos formations. Que souhaitez-vous savoir ?";
        }

        String message = userMessage.toLowerCase().trim();
        
        // Gestion des salutations
        if (containsAny(message, greetings)) {
            return getGreetingResponse();
        }
        
        // Gestion des demandes d'aide
        if (containsAny(message, helpKeywords)) {
            return getHelpResponse();
        }
        
        // Gestion des questions sur les cat√©gories
        String categoryResponse = handleCategoryQuestions(message);
        if (categoryResponse != null) {
            return categoryResponse;
        }
        
        // Gestion des questions sur les formations
        String formationResponse = handleFormationQuestions(message);
        if (formationResponse != null) {
            return formationResponse;
        }
        
        // Gestion des questions g√©n√©rales sur l'entreprise
        String generalResponse = handleGeneralQuestions(message);
        if (generalResponse != null) {
            return generalResponse;
        }
        
        // Message par d√©faut si aucune correspondance
        return getDefaultResponse();
    }
    
    private String getGreetingResponse() {
        List<String> responses = Arrays.asList(
            "Bonjour ! üëã Je suis votre assistant pour les formations d'Esprit Entreprise. Comment puis-je vous aider aujourd'hui ?",
            "Salut ! üòä Je peux vous renseigner sur nos formations et cat√©gories. Que cherchez-vous ?",
            "Hello ! üéì Je suis l√† pour r√©pondre √† vos questions sur nos programmes de formation. Que souhaitez-vous savoir ?"
        );
        return responses.get(new Random().nextInt(responses.size()));
    }
    
    private String getHelpResponse() {
        return "ü§ñ **Je peux vous aider avec :**\n\n" +
               "üéì **Formations disponibles** - Tapez \"formations\" ou \"liste formations\"\n" +
               "üìÇ **Cat√©gories** - Tapez \"cat√©gories\" ou \"domaines\"\n" +
               "üîç **Recherche par domaine** - \"formations en AI\" ou \"formations marketing\"\n" +
               "üìã **D√©tails formation** - \"d√©tails [nom formation]\"\n" +
               "üí∞ **Informations pratiques** - \"prix\", \"dur√©e\", \"inscription\"\n\n" +
               "üí° **Exemples de questions :**\n" +
               "‚Ä¢ \"Quelles sont les formations en IA ?\"\n" +
               "‚Ä¢ \"Montrez-moi toutes les cat√©gories\"\n" +
               "‚Ä¢ \"Formations disponibles en marketing\"";
    }
    
    private String handleCategoryQuestions(String message) {
        // Questions sur la liste des cat√©gories
        if (message.contains("cat√©gorie") || message.contains("domaine") || 
            message.contains("secteur") || message.contains("sp√©cialit√©")) {
            
            if (message.contains("quell") || message.contains("list") || 
                message.contains("disponible") || message.contains("exist") ||
                message.contains("cat√©gories") || message.contains("toutes")) {
                return getCategoriesListResponse();
            }
        }
        
        // Recherche formations par cat√©gorie avec pattern am√©lior√©
        if (isSearchByCategory(message)) {
            String categoryName = extractCategoryFromMessage(message);
            if (categoryName != null) {
                return getFormationsInCategoryResponse(categoryName);
            }
        }
        
        return null;
    }
    
    private boolean isSearchByCategory(String message) {
        // Patterns pour d√©tecter une recherche par cat√©gorie
        String[] categoryPatterns = {
            "formations en ", "formations dans ", "formations de ", 
            "cours en ", "cours dans ", "cours de ",
            "quelles formations en ", "quelles formations dans ",
            "formations category ", "formations cat√©gorie "
        };
        
        for (String pattern : categoryPatterns) {
            if (message.contains(pattern)) {
                return true;
            }
        }
        
        // V√©rifier les mots-cl√©s de cat√©gories
        return categoryKeywords.keySet().stream().anyMatch(message::contains);
    }
    
    private String handleFormationQuestions(String message) {
        // Questions g√©n√©rales sur les formations
        if (message.contains("formation") || message.contains("cours") || 
            message.contains("programme") || message.contains("training")) {
            
            // Liste de toutes les formations
            if (message.contains("quell") || message.contains("list") || 
                message.contains("disponible") || message.contains("tout") ||
                message.equals("formations") || message.contains("toutes les formations")) {
                return getAllFormationsResponse();
            }
            
            // Recherche d'une formation sp√©cifique
            String formationName = extractFormationNameFromMessage(message);
            if (formationName != null) {
                return getSpecificFormationResponse(formationName);
            }
        }
        
        // Questions sur les d√©tails pratiques
        return handlePracticalQuestions(message);
    }
    
    private String handlePracticalQuestions(String message) {
        if (message.contains("dur√©e") || message.contains("combien de temps")) {
            return "‚è∞ **Dur√©e des formations :**\n\n" +
                   "Les dur√©es varient selon le programme choisi.\n\n" +
                   "üí° **Pour conna√Ætre la dur√©e exacte :**\n" +
                   "‚Ä¢ Pr√©cisez-moi quelle formation vous int√©resse\n" +
                   "‚Ä¢ Consultez les d√©tails sur " + baseUrl + "/formations\n\n" +
                   "üîç **Quelle formation vous int√©resse ?**";
        }
        
        if (message.contains("prix") || message.contains("tarif") || message.contains("co√ªt")) {
            return "üí∞ **Informations tarifaires :**\n\n" +
                   "Nos formations ont des tarifs adapt√©s √† chaque programme.\n\n" +
                   "üìä **Pour conna√Ætre les prix :**\n" +
                   "‚Ä¢ Consultez " + baseUrl + "/formations\n" +
                   "‚Ä¢ Contactez notre √©quipe commerciale\n" +
                   "‚Ä¢ Demandez un devis personnalis√©\n\n" +
                   "üí° **Quelle formation vous int√©resse pour le tarif ?**";
        }
        
        if (message.contains("inscri") || message.contains("comment s'inscri")) {
            return "üìù **Inscription simple et rapide :**\n\n" +
                   "**√âtapes :**\n" +
                   "1Ô∏è‚É£ Visitez " + baseUrl + "/formations\n" +
                   "2Ô∏è‚É£ Choisissez votre formation\n" +
                   "3Ô∏è‚É£ Cliquez sur \"S'inscrire\"\n" +
                   "4Ô∏è‚É£ Remplissez le formulaire\n" +
                   "5Ô∏è‚É£ Confirmez votre inscription\n\n" +
                   "‚úÖ **Inscription s√©curis√©e en quelques clics !**";
        }
        
        return null;
    }
    
    private String handleGeneralQuestions(String message) {
        if (message.contains("esprit entreprise") || message.contains("votre entreprise") || 
            message.contains("qui √™tes-vous") || message.contains("pr√©sentation")) {
            return "üè¢ **Esprit Entreprise - Formation Professionnelle**\n\n" +
                   "Nous sommes sp√©cialis√©s dans la formation de qualit√©.\n\n" +
                   "‚ú® **Nos points forts :**\n" +
                   "‚Ä¢ Large gamme de formations professionnelles\n" +
                   "‚Ä¢ Formateurs experts dans leurs domaines\n" +
                   "‚Ä¢ Programmes adapt√©s aux besoins du march√©\n" +
                   "‚Ä¢ Suivi personnalis√© des apprenants\n\n" +
                   "üéì **D√©couvrez nos formations d√®s maintenant !**";
        }
        
        if (message.contains("contact") || message.contains("t√©l√©phone") || message.contains("email")) {
            return "üìû **Contactez-nous :**\n\n" +
                   "üåê **Site web :** " + baseUrl + "\n" +
                   "üìß **Email :** contact@espritentreprise.com\n" +
                   "üìç **Adresse :** [Votre adresse]\n\n" +
                   "‚è∞ **Horaires :** Lundi-Vendredi 9h-18h\n\n" +
                   "üí¨ **Comment puis-je vous aider avec nos formations ?**";
        }
        
        return null;
    }
    
    private String getCategoriesListResponse() {
        try {
            List<Category> categories = categoryRepository.findAll();
            
            if (categories.isEmpty()) {
                return "üìÇ **Catalogue en pr√©paration**\n\n" +
                       "Nos cat√©gories de formations sont en cours de mise √† jour.\n\n" +
                       "üîÑ Revenez bient√¥t pour d√©couvrir tous nos domaines !";
            }
            
            StringBuilder response = new StringBuilder();
            response.append("üéØ **Nos domaines de formation :**\n\n");
            
            for (Category category : categories) {
                response.append("üìÇ **").append(category.getName()).append("**");
                
                // Compter les formations dans cette cat√©gorie
                try {
                    long formationCount = category.getFormations() != null ? 
                        category.getFormations().size() : 
                        formationRepository.findByCategoryId(category.getId()).size();
                    
                    response.append(" (").append(formationCount).append(" formation");
                    if (formationCount > 1) response.append("s");
                    response.append(")\n");
                } catch (Exception e) {
                    response.append("\n");
                }
            }
            
            response.append("\nüí° **Pour voir les formations d'une cat√©gorie :**\n");
            response.append("Tapez \"formations en [nom cat√©gorie]\"\n");
            response.append("Exemple : \"formations en IA\"");
            
            return response.toString();
            
        } catch (Exception e) {
            logger.error("Erreur lors de la r√©cup√©ration des cat√©gories", e);
            return "‚ùå **Probl√®me technique**\n\n" +
                   "Je ne peux pas acc√©der aux cat√©gories actuellement.\n" +
                   "üí° R√©essayez dans quelques instants.";
        }
    }
    
    private String getAllFormationsResponse() {
        try {
            List<Formation> formations = formationRepository.findAll();
            
            if (formations.isEmpty()) {
                return "üìö **Catalogue en pr√©paration**\n\n" +
                       "Notre catalogue de formations est en cours de mise √† jour.\n\n" +
                       "üîÑ Revenez bient√¥t pour d√©couvrir tous nos programmes !";
            }
            
            if (formations.size() > 15) {
                return String.format(
                    "üìä **%d formations disponibles** dans notre catalogue !\n\n" +
                    "üîç **Navigation facilit√©e :**\n" +
                    "‚ñ´Ô∏è \"cat√©gories\" - Voir tous les domaines\n" +
                    "‚ñ´Ô∏è \"formations en [domaine]\" - Recherche cibl√©e\n" +
                    "‚ñ´Ô∏è Nom d'une formation - D√©tails sp√©cifiques\n\n" +
                    "üåê **Catalogue complet :** %s/formations", 
                    formations.size(), baseUrl);
            }
            
            StringBuilder response = new StringBuilder();
            response.append("üìö **Toutes nos formations :**\n\n");
            
            // Grouper par cat√©gorie si possible
            Map<String, List<Formation>> formationsByCategory = formations.stream()
                .collect(Collectors.groupingBy(f -> 
                    f.getCategory() != null ? f.getCategory().getName() : "Autres"));
            
            for (Map.Entry<String, List<Formation>> entry : formationsByCategory.entrySet()) {
                response.append("üìÇ **").append(entry.getKey()).append("**\n");
                
                for (Formation formation : entry.getValue()) {
                    String formationName = getFormationDisplayName(formation);
                    response.append("  üéì ").append(formationName);
                    
                    if (formation.getPrice() != null) {
                        response.append(" - ").append(formation.getPrice()).append("‚Ç¨");
                    }
                    response.append("\n");
                }
                response.append("\n");
            }
            
            response.append("üí¨ **Besoin de d√©tails ?** Demandez-moi des informations sur une formation !");
            return response.toString();
            
        } catch (Exception e) {
            logger.error("Erreur lors de la r√©cup√©ration des formations", e);
            return "‚ùå **Probl√®me technique**\n\n" +
                   "Je ne peux pas acc√©der aux formations actuellement.\n" +
                   "üí° R√©essayez dans quelques instants.";
        }
    }
    
    private String getFormationsInCategoryResponse(String categoryName) {
        try {
            // Recherche de la cat√©gorie (flexible)
            Category category = findCategoryByName(categoryName);
            
            if (category == null) {
                return String.format("‚ùå **Cat√©gorie non trouv√©e : \"%s\"**\n\n" +
                    "üí° **Suggestions :**\n" +
                    "‚ñ´Ô∏è V√©rifiez l'orthographe\n" +
                    "‚ñ´Ô∏è Tapez \"cat√©gories\" pour voir toutes les options\n" +
                    "‚ñ´Ô∏è Essayez des termes plus g√©n√©raux\n\n" +
                    "üîç **Cat√©gories populaires :** IA, Marketing, Design, Business", 
                    categoryName);
            }
            
            List<Formation> formations = category.getFormations() != null ? 
                category.getFormations() : 
                formationRepository.findByCategoryId(category.getId());
            
            if (formations.isEmpty()) {
                return String.format("üìÇ **%s**\n\n" +
                    "Aucune formation disponible actuellement dans cette cat√©gorie.\n\n" +
                    "üîÑ Notre catalogue √©volue r√©guli√®rement !\n" +
                    "üí° Tapez \"cat√©gories\" pour explorer d'autres domaines.", 
                    category.getName());
            }
            
            StringBuilder response = new StringBuilder();
            response.append(String.format("üéì **Formations en %s**\n", category.getName()));
            response.append(String.format("üìä **%d formation%s disponible%s**\n\n", 
                formations.size(), 
                formations.size() > 1 ? "s" : "",
                formations.size() > 1 ? "s" : ""));
            
            for (Formation formation : formations) {
                String formationName = getFormationDisplayName(formation);
                response.append("üéØ **").append(formationName).append("**\n");
                
                if (formation.getDescription() != null && !formation.getDescription().isEmpty()) {
                    String shortDesc = formation.getDescription().length() > 100 ? 
                        formation.getDescription().substring(0, 100) + "..." : 
                        formation.getDescription();
                    response.append("   üìù ").append(shortDesc).append("\n");
                }
                
                // Ajouter le prix si disponible
                if (formation.getPrice() != null) {
                    response.append("   üí∞ ").append(formation.getPrice()).append("‚Ç¨\n");
                }
                
                // Ajouter les dates si disponibles
                if (formation.getDateDebut() != null) {
                    response.append("   üìÖ D√©but : ").append(
                        formation.getDateDebut().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))
                    ).append("\n");
                }
                
                response.append("\n");
            }
            
            response.append("üí¨ **Int√©ress√© par une formation ?** Demandez-moi plus de d√©tails !");
            return response.toString();
            
        } catch (Exception e) {
            logger.error("Erreur lors de la recherche de formations par cat√©gorie: " + categoryName, e);
            return "‚ùå **Erreur de recherche**\n\n" +
                   "Probl√®me lors de la recherche dans cette cat√©gorie.\n" +
                   "üí° Reformulez votre demande ou essayez \"cat√©gories\".";
        }
    }
    
    private String getSpecificFormationResponse(String formationName) {
        try {
            List<Formation> formations = formationRepository.searchFormations(formationName);
            
            if (formations.isEmpty()) {
                return String.format("üîç **Formation recherch√©e : \"%s\"**\n\n" +
                    "Aucune formation trouv√©e avec ce nom.\n\n" +
                    "üí° **Suggestions :**\n" +
                    "‚ñ´Ô∏è V√©rifiez l'orthographe\n" +
                    "‚ñ´Ô∏è Utilisez des mots-cl√©s plus simples\n" +
                    "‚ñ´Ô∏è Tapez \"formations\" pour voir le catalogue complet\n" +
                    "‚ñ´Ô∏è Essayez \"formations en [domaine]\"", formationName);
            }
            
            Formation formation = formations.get(0);
            StringBuilder response = new StringBuilder();
            
            String displayName = getFormationDisplayName(formation);
            response.append("üìñ **").append(displayName).append("**\n\n");
            
            // Cat√©gorie
            if (formation.getCategory() != null) {
                response.append("üìÇ **Cat√©gorie :** ").append(formation.getCategory().getName()).append("\n");
            }
            
            // Description
            if (formation.getDescription() != null && !formation.getDescription().isEmpty()) {
                response.append("üìù **Description :**\n").append(formation.getDescription()).append("\n\n");
            }
            
            // Prix
            if (formation.getPrice() != null) {
                response.append("üí∞ **Prix :** ").append(formation.getPrice()).append("‚Ç¨\n");
            }
            
            // Dates
            if (formation.getDateDebut() != null) {
                response.append("üìÖ **Date de d√©but :** ").append(
                    formation.getDateDebut().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))
                ).append("\n");
            }
            
            if (formation.getDateFin() != null) {
                response.append("üèÅ **Date de fin :** ").append(
                    formation.getDateFin().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))
                ).append("\n");
            }
            
            if (formation.getRegistrationEndDate() != null) {
                response.append("‚è∞ **Fin d'inscription :** ").append(
                    formation.getRegistrationEndDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))
                ).append("\n");
            }
            
            // Note moyenne
            if (formation.getAverageRating() != null && formation.getAverageRating() > 0) {
                response.append("‚≠ê **Note moyenne :** ").append(formation.getAverageRating()).append("/5\n");
            }
            
            response.append("\nüåê **Plus d'informations :** ").append(baseUrl).append("/formations\n");
            response.append("üí¨ **D'autres questions sur cette formation ?**");
            
            return response.toString();
            
        } catch (Exception e) {
            logger.error("Erreur lors de la recherche de formation sp√©cifique: " + formationName, e);
            return "‚ùå **Erreur de recherche**\n\n" +
                   "Probl√®me lors de la recherche de cette formation.\n" +
                   "üí° R√©essayez avec un nom diff√©rent.";
        }
    }
    
    private String getDefaultResponse() {
        List<String> responses = Arrays.asList(
            "ü§î **Je me sp√©cialise dans les formations !**\n\nüí° **Essayez :**\n‚ñ´Ô∏è \"formations\"\n‚ñ´Ô∏è \"cat√©gories\"\n‚ñ´Ô∏è \"formations en IA\"\n‚ñ´Ô∏è \"prix des formations\"",
            "‚ùì **Reformulez votre question sur les formations**\n\nüéì **Je peux vous aider avec :**\n‚ñ´Ô∏è Liste des formations\n‚ñ´Ô∏è Cat√©gories disponibles\n‚ñ´Ô∏è D√©tails d'une formation\n‚ñ´Ô∏è Tarifs et inscriptions",
            "üéØ **Assistant formations √† votre service !**\n\nüí¨ **Exemples de questions :**\n‚ñ´Ô∏è \"Quelles formations en marketing ?\"\n‚ñ´Ô∏è \"Toutes les cat√©gories\"\n‚ñ´Ô∏è \"Comment s'inscrire ?\""
        );
        return responses.get(new Random().nextInt(responses.size()));
    }
    
    // === M√âTHODES UTILITAIRES ===
    
    private boolean containsAny(String text, Set<String> keywords) {
        return keywords.stream().anyMatch(text::contains);
    }
    
    private String getFormationDisplayName(Formation formation) {
        if (formation.getTitle() != null && !formation.getTitle().trim().isEmpty()) {
            return formation.getTitle();
        }
        if (formation.getName() != null && !formation.getName().trim().isEmpty()) {
            return formation.getName();
        }
        return "Formation sans nom";
    }
    
    private Category findCategoryByName(String categoryName) {
        try {
            // Recherche exacte d'abord
            List<Category> exactMatches = categoryRepository.findByNameContainingIgnoreCase(categoryName);
            if (!exactMatches.isEmpty()) {
                return exactMatches.get(0);
            }
            
            // Recherche avec les mots-cl√©s mapp√©s
            String mappedCategory = categoryKeywords.get(categoryName.toLowerCase());
            if (mappedCategory != null) {
                List<Category> mappedMatches = categoryRepository.findByNameContainingIgnoreCase(mappedCategory);
                if (!mappedMatches.isEmpty()) {
                    return mappedMatches.get(0);
                }
            }
            
            // Recherche partielle
            List<Category> allCategories = categoryRepository.findAll();
            for (Category category : allCategories) {
                if (category.getName().toLowerCase().contains(categoryName.toLowerCase()) ||
                    categoryName.toLowerCase().contains(category.getName().toLowerCase())) {
                    return category;
                }
            }
            
        } catch (Exception e) {
            logger.error("Erreur lors de la recherche de cat√©gorie: " + categoryName, e);
        }
        return null;
    }
    
    private String extractCategoryFromMessage(String message) {
        // Patterns pour extraire le nom de cat√©gorie
        String[] patterns = {
            "formations en ", "formations dans ", "formations de ",
            "cours en ", "cours dans ", "cours de ",
            "quelles formations en ", "quelles formations dans "
        };
        
        for (String pattern : patterns) {
            int index = message.indexOf(pattern);
            if (index != -1) {
                String remaining = message.substring(index + pattern.length()).trim();
                if (!remaining.isEmpty()) {
                    // Nettoyer et extraire le nom
                    String cleanName = remaining.replaceAll("[?.,!]", "").trim();
                    String[] words = cleanName.split("\\s+");
                    if (words.length > 0 && words[0].length() > 1) {
                        return words[0]; // Premier mot significatif
                    }
                }
            }
        }
        
        // V√©rifier les mots-cl√©s directs
        for (String keyword : categoryKeywords.keySet()) {
            if (message.contains(keyword)) {
                return keyword;
            }
        }
        
        return null;
    }
    
    private String extractFormationNameFromMessage(String message) {
        // Patterns pour extraire le nom de formation
        String[] patterns = {"formation ", "cours ", "programme ", "d√©tails ", "parlez-moi de ", "info "};
        
        for (String pattern : patterns) {
            int index = message.indexOf(pattern);
            if (index != -1) {
                String remaining = message.substring(index + pattern.length()).trim();
                if (!remaining.isEmpty()) {
                    // Nettoyer et extraire le nom
                    String cleanName = remaining.replaceAll("[?.,!]", "").trim();
                    if (cleanName.length() > 2) { // Au moins 3 caract√®res
                        return cleanName;
                    }
                }
            }
        }
        return null;
    }
}